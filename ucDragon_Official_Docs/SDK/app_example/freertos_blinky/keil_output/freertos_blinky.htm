<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\keil_output\freertos_blinky.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\keil_output\freertos_blinky.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Mon May 16 16:23:50 2016
<BR><P>
<H3>Maximum Stack Usage =        208 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; prvSetupHardware &rArr; Board_Init &rArr; Board_Debug_Init &rArr; Chip_Clock_SetUSARTNBaseClockRate &rArr; Chip_Clock_GetUSARTNBaseClockRate &rArr; __aeabi_lmul &rArr; __aeabi_llsl
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[10]">BOD_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">BOD_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10]">BOD_IRQHandler</a> from keil_freertos_startup_lpc82x.o(.text) referenced from keil_freertos_startup_lpc82x.o(RESET)
 <LI><a href="#[e]">CMP_IRQHandler</a> from keil_freertos_startup_lpc82x.o(.text) referenced from keil_freertos_startup_lpc82x.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from keil_freertos_startup_lpc82x.o(.text) referenced from keil_freertos_startup_lpc82x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from keil_freertos_startup_lpc82x.o(.text) referenced from keil_freertos_startup_lpc82x.o(RESET)
 <LI><a href="#[b]">I2C_IRQHandler</a> from keil_freertos_startup_lpc82x.o(.text) referenced from keil_freertos_startup_lpc82x.o(RESET)
 <LI><a href="#[d]">MRT_IRQHandler</a> from keil_freertos_startup_lpc82x.o(.text) referenced from keil_freertos_startup_lpc82x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from keil_freertos_startup_lpc82x.o(.text) referenced from keil_freertos_startup_lpc82x.o(RESET)
 <LI><a href="#[13]">PIN_INT0_IRQHandler</a> from keil_freertos_startup_lpc82x.o(.text) referenced from keil_freertos_startup_lpc82x.o(RESET)
 <LI><a href="#[14]">PIN_INT1_IRQHandler</a> from keil_freertos_startup_lpc82x.o(.text) referenced from keil_freertos_startup_lpc82x.o(RESET)
 <LI><a href="#[15]">PIN_INT2_IRQHandler</a> from keil_freertos_startup_lpc82x.o(.text) referenced from keil_freertos_startup_lpc82x.o(RESET)
 <LI><a href="#[16]">PIN_INT3_IRQHandler</a> from keil_freertos_startup_lpc82x.o(.text) referenced from keil_freertos_startup_lpc82x.o(RESET)
 <LI><a href="#[17]">PIN_INT4_IRQHandler</a> from keil_freertos_startup_lpc82x.o(.text) referenced from keil_freertos_startup_lpc82x.o(RESET)
 <LI><a href="#[18]">PIN_INT5_IRQHandler</a> from keil_freertos_startup_lpc82x.o(.text) referenced from keil_freertos_startup_lpc82x.o(RESET)
 <LI><a href="#[19]">PIN_INT6_IRQHandler</a> from keil_freertos_startup_lpc82x.o(.text) referenced from keil_freertos_startup_lpc82x.o(RESET)
 <LI><a href="#[1a]">PIN_INT7_IRQHandler</a> from keil_freertos_startup_lpc82x.o(.text) referenced from keil_freertos_startup_lpc82x.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from port.o(.emb_text) referenced from keil_freertos_startup_lpc82x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from keil_freertos_startup_lpc82x.o(.text) referenced from keil_freertos_startup_lpc82x.o(RESET)
 <LI><a href="#[c]">SCT_IRQHandler</a> from keil_freertos_startup_lpc82x.o(.text) referenced from keil_freertos_startup_lpc82x.o(RESET)
 <LI><a href="#[6]">SPI0_IRQHandler</a> from keil_freertos_startup_lpc82x.o(.text) referenced from keil_freertos_startup_lpc82x.o(RESET)
 <LI><a href="#[7]">SPI1_IRQHandler</a> from keil_freertos_startup_lpc82x.o(.text) referenced from keil_freertos_startup_lpc82x.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from port.o(i.SVC_Handler) referenced from keil_freertos_startup_lpc82x.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from keil_freertos_startup_lpc82x.o(RESET)
 <LI><a href="#[8]">UART0_IRQHandler</a> from keil_freertos_startup_lpc82x.o(.text) referenced from keil_freertos_startup_lpc82x.o(RESET)
 <LI><a href="#[9]">UART1_IRQHandler</a> from keil_freertos_startup_lpc82x.o(.text) referenced from keil_freertos_startup_lpc82x.o(RESET)
 <LI><a href="#[a]">UART2_IRQHandler</a> from keil_freertos_startup_lpc82x.o(.text) referenced from keil_freertos_startup_lpc82x.o(RESET)
 <LI><a href="#[f]">WDT_IRQHandler</a> from keil_freertos_startup_lpc82x.o(.text) referenced from keil_freertos_startup_lpc82x.o(RESET)
 <LI><a href="#[12]">WKT_IRQHandler</a> from keil_freertos_startup_lpc82x.o(.text) referenced from keil_freertos_startup_lpc82x.o(RESET)
 <LI><a href="#[1c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from keil_freertos_startup_lpc82x.o(.text)
 <LI><a href="#[1b]">main</a> from main_freertos_blinky.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[21]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[20]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[1f]">vLEDTask0</a> from main_freertos_blinky.o(i.vLEDTask0) referenced from main_freertos_blinky.o(i.main)
 <LI><a href="#[1d]">vLEDTask1</a> from main_freertos_blinky.o(i.vLEDTask1) referenced from main_freertos_blinky.o(i.main)
 <LI><a href="#[1e]">vLEDTask2</a> from main_freertos_blinky.o(i.vLEDTask2) referenced from main_freertos_blinky.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> keil_freertos_startup_lpc82x.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[22]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7c]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[7d]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[7e]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[7f]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[80]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[75]"></a>__asm___6_port_c_39a90d8d__prvPortStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[55]"></a>ulSetInterruptMaskFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[57]"></a>vClearInterruptMaskFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; Board_UARTPutSTR &rArr; Board_UARTPutTextChar &rArr; Chip_UART_SendBlocking &rArr; Chip_UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_freertos_startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, keil_freertos_startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_freertos_startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_freertos_startup_lpc82x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_freertos_startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_freertos_startup_lpc82x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_freertos_startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>CMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_freertos_startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_freertos_startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_freertos_startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_freertos_startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_freertos_startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_freertos_startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>MRT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_freertos_startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_freertos_startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_freertos_startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_freertos_startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PIN_INT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_freertos_startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_freertos_startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PIN_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_freertos_startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_freertos_startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PIN_INT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_freertos_startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_freertos_startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PIN_INT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_freertos_startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_freertos_startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PIN_INT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_freertos_startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_freertos_startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PIN_INT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_freertos_startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_freertos_startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PIN_INT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_freertos_startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_freertos_startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PIN_INT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_freertos_startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_freertos_startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_freertos_startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_freertos_startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_freertos_startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_freertos_startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_freertos_startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_freertos_startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_freertos_startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_freertos_startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_freertos_startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_freertos_startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_freertos_startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_freertos_startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_freertos_startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_freertos_startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>WKT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_freertos_startup_lpc82x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_freertos_startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetWDTLFORate
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetUSARTNBaseClockRate
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IRC_SetFreq
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetUSARTNBaseClockRate
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaud
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemClockRate
</UL>

<P><STRONG><a name="[25]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetUSARTNBaseClockRate
</UL>

<P><STRONG><a name="[28]"></a>__aeabi_lmul</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetUSARTNBaseClockRate
</UL>

<P><STRONG><a name="[82]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[74]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[27]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[87]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[26]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[88]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>Board_UARTPutSTR</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, board.o(i.Board_UARTPutSTR))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Board_UARTPutSTR &rArr; Board_UARTPutTextChar &rArr; Chip_UART_SendBlocking &rArr; Chip_UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UARTPutTextChar
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> keil_freertos_startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[23]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[8a]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>Board_Debug_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, board.o(i.Board_Debug_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Board_Debug_Init &rArr; Chip_Clock_SetUSARTNBaseClockRate &rArr; Chip_Clock_GetUSARTNBaseClockRate &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetUSARTNBaseClockRate
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UART_Init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaud
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[34]"></a>Board_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, board.o(i.Board_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Board_Init &rArr; Board_Debug_Init &rArr; Chip_Clock_SetUSARTNBaseClockRate &rArr; Chip_Clock_GetUSARTNBaseClockRate &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Debug_Init
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SPI_PinMux
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C_PinMux
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LED_Init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Key_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[3b]"></a>Board_LED_Set</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, board.o(i.Board_LED_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Board_LED_Set &rArr; Chip_GPIO_PinSetState
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_PinSetState
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLEDTask2
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLEDTask1
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLEDTask0
</UL>

<P><STRONG><a name="[2d]"></a>Board_UARTPutTextChar</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, board.o(i.Board_UARTPutTextChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Board_UARTPutTextChar &rArr; Chip_UART_SendBlocking &rArr; Chip_UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SendBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UARTPutSTR
</UL>

<P><STRONG><a name="[41]"></a>Chip_Clock_GetMainClockRate</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, clock_8xx.o(i.Chip_Clock_GetMainClockRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetWDTOSCRate
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemPLLOutClockRate
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemPLLInClockRate
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetUSARTNBaseClockRate
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetUSARTNBaseClockRate
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemClockRate
</UL>

<P><STRONG><a name="[45]"></a>Chip_Clock_GetSystemClockRate</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, clock_8xx.o(i.Chip_Clock_GetSystemClockRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Chip_Clock_GetSystemClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[42]"></a>Chip_Clock_GetSystemPLLInClockRate</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, clock_8xx.o(i.Chip_Clock_GetSystemPLLInClockRate))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemPLLOutClockRate
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
</UL>

<P><STRONG><a name="[44]"></a>Chip_Clock_GetSystemPLLOutClockRate</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, clock_8xx.o(i.Chip_Clock_GetSystemPLLOutClockRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_Clock_GetSystemPLLOutClockRate
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetPLLFreq
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemPLLInClockRate
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
</UL>

<P><STRONG><a name="[48]"></a>Chip_Clock_GetUSARTNBaseClockRate</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, clock_8xx.o(i.Chip_Clock_GetUSARTNBaseClockRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Chip_Clock_GetUSARTNBaseClockRate &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetUSARTNBaseClockRate
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaud
</UL>

<P><STRONG><a name="[43]"></a>Chip_Clock_GetWDTOSCRate</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, clock_8xx.o(i.Chip_Clock_GetWDTOSCRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetWDTLFORate
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
</UL>

<P><STRONG><a name="[5f]"></a>Chip_Clock_SetMainClockSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clock_8xx.o(i.Chip_Clock_SetMainClockSource), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll_config
</UL>

<P><STRONG><a name="[5e]"></a>Chip_Clock_SetSystemPLLSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clock_8xx.o(i.Chip_Clock_SetSystemPLLSource), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll_config
</UL>

<P><STRONG><a name="[32]"></a>Chip_Clock_SetUSARTNBaseClockRate</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, clock_8xx.o(i.Chip_Clock_SetUSARTNBaseClockRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Chip_Clock_SetUSARTNBaseClockRate &rArr; Chip_Clock_GetUSARTNBaseClockRate &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SYSCTL_SetUSARTFRGDivider
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetUSARTNBaseClockRate
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Debug_Init
</UL>

<P><STRONG><a name="[54]"></a>Chip_IOCON_PinSetI2CMode</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, ioswm_8xx.o(i.Chip_IOCON_PinSetI2CMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Chip_IOCON_PinSetI2CMode
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C_PinMux
</UL>

<P><STRONG><a name="[4b]"></a>Chip_IRC_SetFreq</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, clock_8xx.o(i.Chip_IRC_SetFreq), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll_config
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupIrcClocking
</UL>

<P><STRONG><a name="[3f]"></a>Chip_SWM_MovablePinAssign</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, ioswm_8xx.o(i.Chip_SWM_MovablePinAssign))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Chip_SWM_MovablePinAssign
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SPI_PinMux
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UART_Init
</UL>

<P><STRONG><a name="[60]"></a>Chip_SYSCTL_PowerDown</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, syscon_8xx.o(i.Chip_SYSCTL_PowerDown), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll_config
</UL>

<P><STRONG><a name="[5d]"></a>Chip_SYSCTL_PowerUp</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, syscon_8xx.o(i.Chip_SYSCTL_PowerUp), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll_config
</UL>

<P><STRONG><a name="[4d]"></a>Chip_SetupIrcClocking</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sysinit_8xx.o(i.Chip_SetupIrcClocking), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IRC_SetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[31]"></a>Chip_UART_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, uart_8xx.o(i.Chip_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chip_UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUARTClockID
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SYSCTL_PeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Debug_Init
</UL>

<P><STRONG><a name="[50]"></a>Chip_UART_Send</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, uart_8xx.o(i.Chip_UART_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Chip_UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SendByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SendBlocking
</UL>

<P><STRONG><a name="[3c]"></a>Chip_UART_SendBlocking</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, uart_8xx.o(i.Chip_UART_SendBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Chip_UART_SendBlocking &rArr; Chip_UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UARTPutTextChar
</UL>

<P><STRONG><a name="[33]"></a>Chip_UART_SetBaud</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, uart_8xx.o(i.Chip_UART_SetBaud))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Chip_UART_SetBaud &rArr; Chip_Clock_GetUSARTNBaseClockRate &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetUSARTNBaseClockRate
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Debug_Init
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_freertos_startup_lpc82x.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clock_8xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SystemCoreClockUpdate &rArr; Chip_Clock_GetSystemClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate &rArr; Chip_Clock_GetWDTLFORate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemClockRate
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[59]"></a>SystemInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sysinit_8xx.o(i.SystemInit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupIrcClocking
</UL>

<P><STRONG><a name="[8b]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[8c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[72]"></a>free</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>

<P><STRONG><a name="[1b]"></a>main</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, main_freertos_blinky.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = main &rArr; prvSetupHardware &rArr; Board_Init &rArr; Board_Debug_Init &rArr; Chip_Clock_SetUSARTNBaseClockRate &rArr; Chip_Clock_GetUSARTNBaseClockRate &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UARTPutSTR
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[6e]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[6d]"></a>pvPortMalloc</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, heap_3.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; Board_UARTPutSTR &rArr; Board_UARTPutTextChar &rArr; Chip_UART_SendBlocking &rArr; Chip_UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[77]"></a>pxPortInitialiseStack</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[67]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[6b]"></a>vApplicationIdleHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, freertoscommonhooks.o(i.vApplicationIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[6f]"></a>vApplicationMallocFailedHook</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, freertoscommonhooks.o(i.vApplicationMallocFailedHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vApplicationMallocFailedHook &rArr; Board_UARTPutSTR &rArr; Board_UARTPutTextChar &rArr; Chip_UART_SendBlocking &rArr; Chip_UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UARTPutSTR
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[70]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main_freertos_blinky.o(i.vApplicationStackOverflowHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vApplicationStackOverflowHook &rArr; Board_UARTPutSTR &rArr; Board_UARTPutTextChar &rArr; Chip_UART_SendBlocking &rArr; Chip_UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UARTPutSTR
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[78]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[76]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[62]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[79]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[66]"></a>vPortEnterCritical</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[68]"></a>vPortExitCritical</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[69]"></a>vPortFree</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, heap_3.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[6a]"></a>vPortYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortYield))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[71]"></a>vTaskDelay</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLEDTask2
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLEDTask1
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLEDTask0
</UL>

<P><STRONG><a name="[5c]"></a>vTaskStartScheduler</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; Board_UARTPutSTR &rArr; Board_UARTPutTextChar &rArr; Chip_UART_SendBlocking &rArr; Chip_UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[24]"></a>vTaskSwitchContext</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; Board_UARTPutSTR &rArr; Board_UARTPutTextChar &rArr; Chip_UART_SendBlocking &rArr; Chip_UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[73]"></a>xPortStartScheduler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = xPortStartScheduler &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvPortStartFirstTask
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[5b]"></a>xTaskGenericCreate</STRONG> (Thumb, 366 bytes, Stack size 40 bytes, tasks.o(i.xTaskGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; Board_UARTPutSTR &rArr; Board_UARTPutTextChar &rArr; Chip_UART_SendBlocking &rArr; Chip_UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>xTaskIncrementTick</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[65]"></a>xTaskResumeAll</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5a]"></a>prvSetupHardware</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main_freertos_blinky.o(i.prvSetupHardware))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvSetupHardware &rArr; Board_Init &rArr; Board_Debug_Init &rArr; Chip_Clock_SetUSARTNBaseClockRate &rArr; Chip_Clock_GetUSARTNBaseClockRate &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f]"></a>vLEDTask0</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main_freertos_blinky.o(i.vLEDTask0))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vLEDTask0 &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LED_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_freertos_blinky.o(i.main)
</UL>
<P><STRONG><a name="[1d]"></a>vLEDTask1</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main_freertos_blinky.o(i.vLEDTask1))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vLEDTask1 &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LED_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_freertos_blinky.o(i.main)
</UL>
<P><STRONG><a name="[1e]"></a>vLEDTask2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main_freertos_blinky.o(i.vLEDTask2))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vLEDTask2 &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LED_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_freertos_blinky.o(i.main)
</UL>
<P><STRONG><a name="[61]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[63]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[6c]"></a>prvGetExpectedIdleTime</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.prvGetExpectedIdleTime))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[21]"></a>prvIdleTask</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetExpectedIdleTime
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[7a]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[20]"></a>prvTaskExitError</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[4f]"></a>Chip_SYSCTL_PeriphReset</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, uart_8xx.o(i.Chip_SYSCTL_PeriphReset))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Init
</UL>

<P><STRONG><a name="[52]"></a>Chip_UART_GetStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart_8xx.o(i.Chip_UART_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Send
</UL>

<P><STRONG><a name="[51]"></a>Chip_UART_SendByte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart_8xx.o(i.Chip_UART_SendByte))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Send
</UL>

<P><STRONG><a name="[4e]"></a>getUARTClockID</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uart_8xx.o(i.getUARTClockID))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Init
</UL>

<P><STRONG><a name="[36]"></a>Board_Key_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, board.o(i.Board_Key_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Board_Key_Init &rArr; Chip_GPIO_PinSetDIR
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_PinSetDIR
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[35]"></a>Board_LED_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, board.o(i.Board_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Board_LED_Init &rArr; Chip_GPIO_PinSetDIR
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_PinSetState
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_PinSetDIR
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[30]"></a>Board_UART_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, board.o(i.Board_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Board_UART_Init &rArr; Chip_SWM_MovablePinAssign
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SWM_MovablePinAssign
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SWM_DisableFixedPin
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_EnablePeriphClock
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_DisablePeriphClock
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Debug_Init
</UL>

<P><STRONG><a name="[40]"></a>Chip_Clock_DisablePeriphClock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, board.o(i.Chip_Clock_DisablePeriphClock))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SPI_PinMux
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C_PinMux
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UART_Init
</UL>

<P><STRONG><a name="[3d]"></a>Chip_Clock_EnablePeriphClock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, board.o(i.Chip_Clock_EnablePeriphClock))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SPI_PinMux
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C_PinMux
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UART_Init
</UL>

<P><STRONG><a name="[39]"></a>Chip_GPIO_PinSetDIR</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, board.o(i.Chip_GPIO_PinSetDIR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chip_GPIO_PinSetDIR
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LED_Init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Key_Init
</UL>

<P><STRONG><a name="[3a]"></a>Chip_GPIO_PinSetState</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, board.o(i.Chip_GPIO_PinSetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_GPIO_PinSetState
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LED_Set
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LED_Init
</UL>

<P><STRONG><a name="[3e]"></a>Chip_SWM_DisableFixedPin</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, board.o(i.Chip_SWM_DisableFixedPin))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UART_Init
</UL>

<P><STRONG><a name="[53]"></a>Chip_SWM_EnableFixedPin</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, board.o(i.Chip_SWM_EnableFixedPin))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C_PinMux
</UL>

<P><STRONG><a name="[38]"></a>Init_I2C_PinMux</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, board.o(i.Init_I2C_PinMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Init_I2C_PinMux &rArr; Chip_IOCON_PinSetI2CMode
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IOCON_PinSetI2CMode
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SWM_EnableFixedPin
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_EnablePeriphClock
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_DisablePeriphClock
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[37]"></a>Init_SPI_PinMux</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, board.o(i.Init_SPI_PinMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Init_SPI_PinMux &rArr; Chip_SWM_MovablePinAssign
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SWM_MovablePinAssign
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_EnablePeriphClock
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_DisablePeriphClock
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[47]"></a>Chip_Clock_GetPLLFreq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, clock_8xx.o(i.Chip_Clock_GetPLLFreq))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemPLLOutClockRate
</UL>

<P><STRONG><a name="[49]"></a>Chip_Clock_GetWDTLFORate</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, clock_8xx.o(i.Chip_Clock_GetWDTLFORate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Chip_Clock_GetWDTLFORate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetWDTOSCRate
</UL>

<P><STRONG><a name="[4a]"></a>Chip_SYSCTL_SetUSARTFRGDivider</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock_8xx.o(i.Chip_SYSCTL_SetUSARTFRGDivider))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetUSARTNBaseClockRate
</UL>

<P><STRONG><a name="[4c]"></a>pll_config</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, clock_8xx.o(i.pll_config), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SYSCTL_PowerUp
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SYSCTL_PowerDown
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetSystemPLLSource
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetMainClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IRC_SetFreq
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
